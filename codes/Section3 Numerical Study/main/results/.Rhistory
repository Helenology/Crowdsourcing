h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
cutoff_list = c(60.1, 90.1, 94.1, 97.1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
results = results[!is.na(results), ]
View(results)
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
results = results[!is.na(results), ]
View(results)
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
cutoff_list = c(60, 90, 94, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
?seq
cutoff_list = seq(from = 0, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
cutoff_list = seq(from = 10, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
cutoff_list = seq(from = 20, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = results[1:]
results = results[-1, ]
View(results)
write.csv(results, "/Users/helenology/Desktop/final project/manipulation test results.csv")
View(results)
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, regularize = FALSE)
data = read.csv("/Users/helenology/Desktop/final project/合并的成绩单.csv")
margin = data$总分
cutoff_list = c(60, 90, 94, 97)
cutoff_list = seq(from = 20, to = 95, by = 1)
# kernel_list = c('epanechnikov', 'uniform', 'triangular')
kernel_list = c('triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, regularize = FALSE)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# kernel_list = c('epanechnikov', 'uniform', 'triangular')
kernel_list = c('triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
tmp$N$eff_left
data = read.csv("/Users/helenology/Desktop/test.csv")
data = read.csv("/Users/helenology/Desktop/test.csv")
View(data)
data = data[, 2:ncol(data)]
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
library(ggplot2)
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
ggplot(data = data, aes(y = MSE, fill = MSE)) +
geom_boxplot()
data$sigma_3 = factor(data$sigma_3)
library(ggplot2)
ggplot(data = data, aes(y = MSE, fill = MSE)) +
geom_boxplot()
ggplot(data = data, aes(y = MSE, group = MSE)) +
geom_boxplot()
ggplot(data = data, aes(y = MSE, x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
library(ggplot2)
ggplot(data = data, aes(y = log(ACC), x = sigma_3)) +
geom_boxplot()
library(ggplot2)
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
data$sigma_3 = factor(data$sigma_3)
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = ACC, x = sigma_3)) +
geom_boxplot()
library(ggplot2)
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
data$sigma_3 = factor(data$sigma_3)
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = ACC, x = sigma_3)) +
geom_boxplot()
View(data)
data = read.csv("/Users/helenology/Desktop/光华/ 论文/4-Crowdsourcing/codes/Section2.4 Reinforced Labeling/two_rounds_props.csv")
data = data[, -1]
library(latex2exp)
plot(data$pi0, data$p2_large_case, type = "l", lty=1,
xlab = TeX("$p_{i0}$"),
ylab = "Confidence",
ylim = c(0.5, 1),
mgp=c(2, 0.5, 0),
)
# plot(data$pi0, data$p2_equal_case, #type='o,
#      # mgp=c(2, 0.5, 0),
#      # cex=0.5,
# xlab = TeX("$p_{i0}$"),
# ylab = "Confidence",
#      # cex.lab = 1.3,
#      # cex.axis = 1.3,
#      )
lines(data$pi0, data$p2_equal_case, lty = 4)
lines(data$pi0, data$pi0, lty=2)
legend("bottomright",
legend = c("Toy Example 1",
"Toy Example 2",
"First-Round"),
lty = c(1, 4, 2))
a = data.frame(c("驱蚊液", "滴露", "袜子"),
c(9.9, 18, 21))
View(a)
a = data.frame("商品" = c("驱蚊液", "滴露", "袜子"),
c(9.9, 18, 21))
View(a)
a = data.frame("商品" = c("驱蚊液", "滴露", "袜子"),
"原价" = c(9.9, 18, 21))
total = sum(a$原价)
total = sum(a$原价)
coupon = 15
final = total - coupon
a$现价 = final / total * a$原价
View(a)
sum(a$现价)
x / price = xianjia / total
library(stringr)
library(reshape2)
library(plyr)
library(ggplot2)
# 设置工作目录
setwd("/Users/helenology/Desktop/光华/\ 论文/4-Crowdsourcing/codes/Section3 Numerical Study/main/results/")
# 获取所有csv文件路径
csv_files <- list.files(pattern = "*.csv")
# 读取所有csv文件
all_csv_data <- lapply(csv_files, read.csv)
data = data.frame()
for(i in 1:length(all_csv_data)){
csv_data = all_csv_data[[i]]
# csv_data$file_name = csv_files[i]
data = rbind(data, csv_data)
}
# MSE
par(las = 1)
data$os_mse = data$os_beta_mse + data$os_sigma_mse
data$inr_mse = data$inr_beta_mse + data$inr_sigma_mse
dat = data[, c("alpha", "subset_ratio", "os_mse", "inr_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
alphas = unique(dat$alpha); alphas
subset_ratios = unique(dat$subset_ratio); subset_ratios
subset_ratios
subset_ratios
for(alpha in alphas){
for(subset_ratio in subset_ratios){
aaa = dat[(dat$alpha == alpha) & (dat$subset_ratio == subset_ratio), ]
boxplot(log(MSE) ~ variable, data = aaa,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
}
alpha
subset_ratio
library(stringr)
library(reshape2)
library(plyr)
library(ggplot2)
# 设置工作目录
setwd("/Users/helenology/Desktop/光华/\ 论文/4-Crowdsourcing/codes/Section3 Numerical Study/main/results/")
# 获取所有csv文件路径
csv_files <- list.files(pattern = "*.csv")
# 读取所有csv文件
all_csv_data <- lapply(csv_files, read.csv)
data = data.frame()
for(i in 1:length(all_csv_data)){
csv_data = all_csv_data[[i]]
# csv_data$file_name = csv_files[i]
data = rbind(data, csv_data)
}
# MSE
par(las = 1)
data$os_mse = data$os_beta_mse + data$os_sigma_mse
data$inr_mse = data$inr_beta_mse + data$inr_sigma_mse
dat = data[, c("alpha", "subset_ratio", "os_mse", "inr_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
alphas = unique(dat$alpha); alphas
subset_ratios = unique(dat$subset_ratio); subset_ratios
subset_ratios
for(alpha in alphas){
for(subset_ratio in subset_ratios){
aaa = dat[(dat$alpha == alpha) & (dat$subset_ratio == subset_ratio), ]
boxplot(log(MSE) ~ variable, data = aaa,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
}
alpha
subset_ratio
View(csv_data)
View(all_csv_data)
a = all_csv_data[[1]]
View(a)
for(each_data in all_csv_data){
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_beta_mse", "inr_beta_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
for(each_data in all_csv_data){
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_beta_mse", "inr_beta_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
alpha
View(each_data)
library(stringr)
library(reshape2)
library(plyr)
library(ggplot2)
# 设置工作目录
setwd("/Users/helenology/Desktop/光华/\ 论文/4-Crowdsourcing/codes/Section3 Numerical Study/main/results/")
# 获取所有csv文件路径
csv_files <- list.files(pattern = "*.csv")
# 读取所有csv文件
all_csv_data <- lapply(csv_files, read.csv)
data = data.frame()
for(i in 1:length(all_csv_data)){
csv_data = all_csv_data[[i]]
# csv_data$file_name = csv_files[i]
data = rbind(data, csv_data)
}
# MSE
par(las = 1)
data$os_mse = data$os_beta_mse + data$os_sigma_mse
par(las = 0)
for(each_data in all_csv_data){
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_beta_mse", "inr_beta_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
par(las = 0)
for(each_data in all_csv_data){
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_beta_mse", "inr_beta_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab = "",
# names = c("INR", "OS"),
main = paste0("alpha=", alpha, " subset=", subset_ratio))
}
for(each_data in all_csv_data){
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_beta_mse", "inr_beta_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab ="",
# names = c("INR", "OS"),
main = paste0("beta MSE: ", "alpha=", alpha, " subset=", subset_ratio))
}
each_data$os_mse = each_data$os_beta_mse + each_data$os_sigma_mse
each_data$inr_mse = each_data$inr_beta_mse + each_data$inr_sigma_mse
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_mse", "inr_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab ="",
# names = c("INR", "OS"),
main = paste0("beta MSE: ", "alpha=", alpha, " subset=", subset_ratio))
for(each_data in all_csv_data){
each_data$os_mse = each_data$os_beta_mse + each_data$os_sigma_mse
each_data$inr_mse = each_data$inr_beta_mse + each_data$inr_sigma_mse
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_mse", "inr_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab ="",
# names = c("INR", "OS"),
main = paste0("all MSE: ", "alpha=", alpha, " subset=", subset_ratio))
}
for(each_data in all_csv_data){
each_data$os_mse = each_data$os_beta_mse + each_data$os_sigma_mse
each_data$inr_mse = each_data$inr_beta_mse + each_data$inr_sigma_mse
alpha = each_data$alpha[1]
subset_ratio = each_data$subset_ratio[1]
dat = each_data[, c("alpha", "subset_ratio", "os_mse", "inr_mse")]
dat = melt(dat, id.vars = c("alpha", "subset_ratio"),
value.name = "MSE")
dat$variable = substr(dat$variable, 1, 3)
dat$variable = gsub("_", "", dat$variable)
boxplot(log(MSE) ~ variable, data = dat,
xlab ="",
# names = c("INR", "OS"),
main = paste0("all MSE: ", "alpha=", alpha, " subset=", subset_ratio))
}
