h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, vce, tmp$test$p_jk)
results = rbind(results, item)
}
}
cutoff_list = c(60, 90, 94, 97)
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel = c('epanechnikov', 'uniform', 'triangular')
vce_list = c('plugin', 'jackknife')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = 'plugin')
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
View(results)
results = data.frame()
results = rbind(results, c(NA, NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "vce", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = vce)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, vce, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
vce
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = vce)
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = 'plugin')
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel = c('epanechnikov', 'uniform', 'triangular')
vce_list = c('plugin', 'jackknife')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
tmp
summary(tmp)
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
print("vce")
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = vce)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = vce)
rdbwdensity(X = margin, c = c, kernel = kernel, vce = vce)
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = "plugin")
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = "plugin")
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel = c('epanechnikov', 'uniform', 'triangular')
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
vce_list = c('plugin', 'jackknife')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
for(vce in vce_list){
### rdbwdensity: compute bandwidth and then use them
print("vce")
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = "plugin")
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
}
c
kernel
vce
rdbwdensity(X = margin, c = c, kernel = kernel, vce = "plugin")
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, vce = "jackknife")
cutoff_list = c(60, 90, 94, 97)
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
print("vce")
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, all = T)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right))
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
summary(tmp)
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(tmp)
View(results)
cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
cutoff_list = c(59.9, 89.9, 93.9, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# cutoff_list = c(59.5, 89.5, 93.5, 96.5)
# cutoff_list = c(59.9, 89.9, 93.9, 97)
cutoff_list = c(60.1, 90.1, 94.1, 97.1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
results = results[!is.na(results), ]
View(results)
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
results = results[!is.na(results), ]
View(results)
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
cutoff_list = c(60, 90, 94, 97)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
?seq
cutoff_list = seq(from = 0, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
cutoff_list = seq(from = 10, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
cutoff_list = seq(from = 20, to = 95, by = 1)
kernel_list = c('epanechnikov', 'uniform', 'triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
View(results)
results = results[1:]
results = results[-1, ]
View(results)
write.csv(results, "/Users/helenology/Desktop/final project/manipulation test results.csv")
View(results)
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, regularize = FALSE)
data = read.csv("/Users/helenology/Desktop/final project/合并的成绩单.csv")
margin = data$总分
cutoff_list = c(60, 90, 94, 97)
cutoff_list = seq(from = 20, to = 95, by = 1)
# kernel_list = c('epanechnikov', 'uniform', 'triangular')
kernel_list = c('triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel, regularize = FALSE)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
# kernel_list = c('epanechnikov', 'uniform', 'triangular')
kernel_list = c('triangular')
results = data.frame()
results = rbind(results, c(NA, NA, NA))
colnames(results) = c("cutoff", "kernel", "p-value")
for(c in cutoff_list){
for(kernel in kernel_list){
### rdbwdensity: compute bandwidth and then use them
tmp <- rdbwdensity(X = margin, c = c, kernel = kernel)
h_left <- tmp$h[1, 1]
h_right <- tmp$h[2, 1]
tmp <- rddensity(X = margin, c = c, h = c(h_left, h_right), kernel = kernel)
print(tmp$test$p_jk)
item = c(c, kernel, tmp$test$p_jk)
results = rbind(results, item)
}
}
tmp$N$eff_left
data = read.csv("/Users/helenology/Desktop/test.csv")
data = read.csv("/Users/helenology/Desktop/test.csv")
View(data)
data = data[, 2:ncol(data)]
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
library(ggplot2)
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
ggplot(data = data, aes(y = MSE, fill = MSE)) +
geom_boxplot()
data$sigma_3 = factor(data$sigma_3)
library(ggplot2)
ggplot(data = data, aes(y = MSE, fill = MSE)) +
geom_boxplot()
ggplot(data = data, aes(y = MSE, group = MSE)) +
geom_boxplot()
ggplot(data = data, aes(y = MSE, x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
library(ggplot2)
ggplot(data = data, aes(y = log(ACC), x = sigma_3)) +
geom_boxplot()
library(ggplot2)
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
data$sigma_3 = factor(data$sigma_3)
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = ACC, x = sigma_3)) +
geom_boxplot()
library(ggplot2)
data = read.csv("/Users/helenology/Desktop/test.csv")
data = data[, -1]
names(data) = c('seed', 'sigma_3', 'MSE', 'ACC')
data$sigma_3 = factor(data$sigma_3)
ggplot(data = data, aes(y = log(MSE), x = sigma_3)) +
geom_boxplot()
ggplot(data = data, aes(y = ACC, x = sigma_3)) +
geom_boxplot()
View(data)
data = read.csv("/Users/helenology/Desktop/光华/ 论文/4-Crowdsourcing/codes/Section2.4 Reinforced Labeling/two_rounds_props.csv")
data = data[, -1]
library(latex2exp)
plot(data$pi0, data$p2_large_case, type = "l", lty=1,
xlab = TeX("$p_{i0}$"),
ylab = "Confidence",
ylim = c(0.5, 1),
mgp=c(2, 0.5, 0),
)
# plot(data$pi0, data$p2_equal_case, #type='o,
#      # mgp=c(2, 0.5, 0),
#      # cex=0.5,
# xlab = TeX("$p_{i0}$"),
# ylab = "Confidence",
#      # cex.lab = 1.3,
#      # cex.axis = 1.3,
#      )
lines(data$pi0, data$p2_equal_case, lty = 4)
lines(data$pi0, data$pi0, lty=2)
legend("bottomright",
legend = c("Toy Example 1",
"Toy Example 2",
"First-Round"),
lty = c(1, 4, 2))
source("~/Desktop/光华/ 论文/4-Crowdsourcing/codes/Section3 Numerical Study/main/results/plot_RMSE.R", echo=TRUE)
boxplot(RMSE ~ X, data = data,
xlab = "",
ylab = "log(RMSE)"#,
# names=c(0, 1)
)
boxplot(RMSE ~ X, data = data,
xlab = "",
ylab = "RMSE"#,
# names=c(0, 1)
)
